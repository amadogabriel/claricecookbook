{"version":3,"sources":["components/Recipe.js","App.js","reportWebVitals.js","index.js","components/recipe.module.css"],"names":["Recipe","title","image","ingredients","className","style","card","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","recipe","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+PAmBeA,EAfA,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YAC3B,OACI,sBAAKC,UAAWC,IAAMC,KAAtB,UACI,6BAAKL,IACL,6BACKE,EAAYI,KAAI,SAAAC,GAAU,OACvB,6BAAKA,EAAWC,YAGxB,qBAAKL,UAAWC,IAAMH,MAAOQ,IAAKR,EAAOS,IAAI,SC2D1CC,EApEH,WAEV,IAFgB,EAMcC,mBAAS,IANvB,mBAMTC,EANS,KAMAC,EANA,OAOYF,mBAAS,IAPrB,mBAOTG,EAPS,KAODC,EAPC,OAQUJ,mBAAS,QARnB,mBAQTK,EARS,KAQFC,EARE,KAUhBC,qBAAU,WACPC,MACE,CAACH,IAGN,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSL,EADT,mBAdf,WAce,oBAbd,qCAYG,cACXM,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBX,EAAWW,EAAKC,MALC,2CAAH,qDAkBhB,OACE,sBAAKvB,UAAU,MAAf,UACI,qBAAKA,UAAU,QAAf,gCAGA,uBAAMA,UAAU,cAAcwB,SAXlB,SAAAC,GAChBA,EAAEC,iBACFX,EAASH,GACTC,EAAU,KAQN,UACE,uBACEb,UAAU,aACV2B,KAAK,OACLC,MAAOhB,EACPiB,SApBW,SAAAJ,GACnBZ,EAAUY,EAAEK,OAAOF,UAqBb,wBAAS5B,UAAU,gBAAgB2B,KAAK,SAAxC,uBAIF,qBAAK3B,UAAU,SAAf,SACGU,EAAQP,KAAI,SAAA4B,GAAM,OACjB,cAAC,EAAD,CAEElC,MAASkC,EAAOA,OAAOC,MACvBlC,MAASiC,EAAOA,OAAOjC,MACvBC,YAAegC,EAAOA,OAAOhC,aAHtBgC,EAAOA,OAAOC,gBC5CpBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,KAAO,qBAAqB,MAAQ,yB","file":"static/js/main.0e8de886.chunk.js","sourcesContent":["import React from 'react';\nimport style from './recipe.module.css';\n\n\nconst Recipe = ({title, image, ingredients}) => {\n    return(\n        <div className={style.card}>\n            <h1>{title}</h1>\n            <ol>\n                {ingredients.map(ingredient => (\n                    <li>{ingredient.text}</li>    \n                ))}\n            </ol>\n            <img className={style.image} src={image} alt=\"\"/>\n            \n        </div>\n    );\n}\n\nexport default Recipe;","import './App.css';\nimport React, {useEffect, useState} from \"react\";\nimport Recipe from './components/Recipe.js';\n\nconst App = () => {\n\n  const APP_ID = \"2fd38d51\";\n  const APP_KEY = \"0a061e7076e4bab2cd3c05bc0b5a1c52\";\n\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('cake');\n\n  useEffect(() => {\n     getRecipes();  \n    }, [query]\n  );\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n  }; \n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n  return(\n    <div className=\"App\">\n        <div className=\"Title\">\n          Clarice's Cookbook\n        </div>\n        <form className=\"search-form\" onSubmit={getSearch}>\n          <input \n            className=\"search-bar\" \n            type=\"text\" \n            value={search} \n            onChange={updateSearch} \n            />\n          <button  className=\"search-button\" type=\"submit\"> \n            Search\n          </button>\n        </form>\n        <div className=\"recipe\">\n          {recipes.map(recipe => (\n            <Recipe \n              key = {recipe.recipe.label}\n              title = {recipe.recipe.label}\n              image = {recipe.recipe.image}\n              ingredients = {recipe.recipe.ingredients}\n            />\n          )\n          )}\n        </div>\n        \n       \n    </div>\n  );\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"recipe_card__1N5Ne\",\"image\":\"recipe_image__234HM\"};"],"sourceRoot":""}